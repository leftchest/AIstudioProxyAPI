# Docker 环境配置文件示例
# 复制此文件为 .env 并根据需要修改配置
#
# 本文件包含根目录 .env.example 中的所有配置参数，并针对 Docker 环境进行了优化
# 主要差异：
# - 代理地址使用 host.docker.internal 而不是 127.0.0.1
# - 启动模式默认为 headless
# - 添加了 Docker 特有的配置项

# =============================================================================
# Docker 主机端口配置
# =============================================================================

# 主机上映射的端口 (外部访问端口)
HOST_FASTAPI_PORT=2048
HOST_STREAM_PORT=3120

# =============================================================================
# 容器内服务端口配置
# =============================================================================

# FastAPI 服务端口 (容器内)
PORT=8000
DEFAULT_FASTAPI_PORT=2048
DEFAULT_CAMOUFOX_PORT=9222

# 流式代理服务配置
STREAM_PORT=3120

# =============================================================================
# 代理配置
# =============================================================================

# HTTP/HTTPS 代理设置
# HTTP_PROXY=http://host.docker.internal:7890
# HTTPS_PROXY=http://host.docker.internal:7890

# 统一代理配置 (优先级高于 HTTP_PROXY/HTTPS_PROXY)
# UNIFIED_PROXY_CONFIG=http://host.docker.internal:7890

# 代理绕过列表 (用分号分隔)
# NO_PROXY=localhost;127.0.0.1;*.local

# =============================================================================
# 日志配置
# =============================================================================

# 服务器日志级别 (DEBUG, INFO, WARNING, ERROR, CRITICAL)
SERVER_LOG_LEVEL=INFO

# 是否重定向 print 输出到日志
SERVER_REDIRECT_PRINT=false

# 启用调试日志
DEBUG_LOGS_ENABLED=false

# 启用跟踪日志
TRACE_LOGS_ENABLED=false

# =============================================================================
# 认证配置
# =============================================================================

# 自动保存认证信息
AUTO_SAVE_AUTH=false

# 认证保存超时时间 (秒)
AUTH_SAVE_TIMEOUT=30

# 自动确认登录
AUTO_CONFIRM_LOGIN=true

# =============================================================================
# 浏览器配置
# =============================================================================

# Camoufox WebSocket 端点 (Docker环境中通常不需要设置)
# CAMOUFOX_WS_ENDPOINT=ws://127.0.0.1:9222

# 启动模式 (normal, headless, virtual_display, direct_debug_no_browser)
# Docker环境推荐使用 headless 模式
LAUNCH_MODE=headless

# =============================================================================
# API 默认参数配置
# =============================================================================

# 默认温度值 (0.0-2.0)
DEFAULT_TEMPERATURE=1.0

# 默认最大输出令牌数
DEFAULT_MAX_OUTPUT_TOKENS=65536

# 默认 Top-P 值 (0.0-1.0)
DEFAULT_TOP_P=0.95

# 默认停止序列 (JSON 数组格式)
DEFAULT_STOP_SEQUENCES=["用户:"]

# 是否在处理请求时自动打开并使用 "URL Context" 功能,此工具功能详情可参考:https://ai.google.dev/gemini-api/docs/url-context
ENABLE_URL_CONTEXT=true

# 是否默认启用 "指定思考预算" 功能 (true/false),不启用时模型一般将自行决定思考预算
# 当 API 请求中未提供 reasoning_effort 参数时将使用此值。
ENABLE_THINKING_BUDGET=false

# "指定思考预算量" 的默认值 (token)
# 当 API 请求中未提供 reasoning_effort 参数时，将使用此值。
DEFAULT_THINKING_BUDGET=8192

# 是否默认启用 "Google Search" 功能 (true/false)
# 当 API 请求中未提供 tools 参数时，将使用此设置作为 Google Search 的默认开关状态。
ENABLE_GOOGLE_SEARCH=false

# 是否在响应中显示思考过程内容 (true/false)
# 控制是否过滤响应中的 <think></think> 标签及其包裹的思考内容
# true: 显示完整响应（包括思考过程）
# false: 过滤思考过程，只显示最终回答
SHOW_THINKING_PROCESS=false

# =============================================================================
# 文件清理配置
# =============================================================================

# 上传文件保留天数（超过此天数的文件将被自动清理）
UPLOAD_FILE_RETENTION_DAYS=7

# 文件清理检查间隔（小时）
FILE_CLEANUP_INTERVAL_HOURS=24

# =============================================================================
# 超时配置 (毫秒)
# =============================================================================

# 响应完成总超时时间
RESPONSE_COMPLETION_TIMEOUT=300000

# 初始等待时间
INITIAL_WAIT_MS_BEFORE_POLLING=500

# 轮询间隔
POLLING_INTERVAL=300
POLLING_INTERVAL_STREAM=180

# 静默超时
SILENCE_TIMEOUT_MS=60000

# 页面操作超时
POST_SPINNER_CHECK_DELAY_MS=500
FINAL_STATE_CHECK_TIMEOUT_MS=1500
POST_COMPLETION_BUFFER=700

# 清理聊天相关超时
CLEAR_CHAT_VERIFY_TIMEOUT_MS=4000
CLEAR_CHAT_VERIFY_INTERVAL_MS=4000

# 点击和剪贴板操作超时
CLICK_TIMEOUT_MS=3000
CLIPBOARD_READ_TIMEOUT_MS=3000

# 元素等待超时
WAIT_FOR_ELEMENT_TIMEOUT_MS=10000

# 流相关配置
PSEUDO_STREAM_DELAY=0.01



# =============================================================================
# 脚本注入配置
# =============================================================================

# 是否启用油猴脚本注入功能
ENABLE_SCRIPT_INJECTION=true

# 油猴脚本文件路径（相对于容器内 /app 目录）
USERSCRIPT_PATH=browser_utils/more_modles.js

# 注意：MODEL_CONFIG_PATH 已废弃
# 模型数据现在直接从 USERSCRIPT_PATH 指定的油猴脚本中解析

# =============================================================================
# 其他配置
# =============================================================================

# 模型名称
MODEL_NAME=AI-Studio_Proxy_API

# 聊天完成 ID 前缀
CHAT_COMPLETION_ID_PREFIX=chatcmpl-

# 默认回退模型 ID
DEFAULT_FALLBACK_MODEL_ID=no model list

# 排除模型文件名
EXCLUDED_MODELS_FILENAME=excluded_models.txt

# AI Studio URL 模式
AI_STUDIO_URL_PATTERN=aistudio.google.com/

# 模型端点 URL 包含字符串
MODELS_ENDPOINT_URL_CONTAINS=MakerSuiteService/ListModels

# 用户输入标记符
USER_INPUT_START_MARKER_SERVER=__USER_INPUT_START__
USER_INPUT_END_MARKER_SERVER=__USER_INPUT_END__

# =============================================================================
# 流状态配置
# =============================================================================

# 流超时日志状态配置
STREAM_MAX_INITIAL_ERRORS=3
STREAM_WARNING_INTERVAL_AFTER_SUPPRESS=60.0
STREAM_SUPPRESS_DURATION_AFTER_INITIAL_BURST=400.0

# =============================================================================
# Docker 特定配置
# =============================================================================

# 容器内存限制
# 默认不限制。如需限制容器资源，请在你的 .env 文件中取消注释并设置以下值。
# 例如: DOCKER_MEMORY_LIMIT=1g或DOCKER_MEMORY_LIMIT=1024m
# 注意：DOCKER_MEMORY_LIMIT和DOCKER_MEMSWAP_LIMIT相同时，不会使用SWAP
# DOCKER_MEMORY_LIMIT=
# DOCKER_MEMSWAP_LIMIT=

# 容器重启策略相关
# 这些配置项在 docker-compose.yml 中使用

# 健康检查间隔 (秒)
HEALTHCHECK_INTERVAL=30

# 健康检查超时 (秒)
HEALTHCHECK_TIMEOUT=10

# 健康检查重试次数
HEALTHCHECK_RETRIES=3

# =============================================================================
# 网络配置说明
# =============================================================================

# 在 Docker 环境中访问主机服务，请使用：
# - Linux: host.docker.internal
# - macOS: host.docker.internal  
# - Windows: host.docker.internal
# 
# 例如，如果主机上有代理服务运行在 7890 端口：
# HTTP_PROXY=http://host.docker.internal:7890
